#include <bits/stdc++.h>
using namespace std;
#include <omp.h>

void BubbleSort(vector<int> &array)
{
    int n = array.size();
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (array[j] > array[j + 1])
                swap(array[j], array[j + 1]);
        }
    }
}

void PllBubbleSort(vector<int> &array)
{
    int n = array.size();
    for (int i = 0; i < n ; i++)
    {
        int phase = i%2;

        #pragma omp parallel for
        for (int j = phase; j < n  - 1; j+=2)
        {
            if (array[j] > array[j + 1]) 
                swap(array[j], array[j + 1]);
        }
    }
}

void merge(vector<int> arr, int start, int end ,int mid){
    vector<int> L;
    vector<int> R;

    for (int i = start; i <= mid; i++)
    {
        L.push_back(arr[i]);
    }
    for (int i = mid + 1; i <= end; i++)
    {
        R.push_back(arr[i]);
    }

    int i = 0;
    int j = 0;
    int k = start;
    while (i < L.size() && j < R.size())
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i++];
        }
        else
        {
            arr[k] = R[j++];
        }
        k++;
    }

    while (i < L.size())
    {
        arr[k++] = L[i++];
    }

    while (j < R.size())
    {
        arr[k++] = R[j++];
    }
}

void mergeSortpll(vector<int> arr, int st, int end)
{
    if(st <end){
        int mid = (st+end)/2;

        #pragma omp parallel sections
        {
#pragma omp section
            mergeSortpll(arr, st, mid);
#pragma omp section
            mergeSortpll(arr, mid+1, end);
        }
        merge(arr ,st,end,mid);
    }
}

void mergeSort(vector<int> arr, int st, int end)
{
    if (st < end)
    {
        int mid = (st + end) / 2;
 
            mergeSort(arr, st, mid);
 
            mergeSort(arr, mid+1, end);
        
        merge(arr, st, end, mid);
    }
}

int main(){
    vector<int> array = {64, 34, 25, 12, 22, 11, 90};

    double st = omp_get_wtime();
    mergeSort(array, 0, array.size() - 1);
    double end = omp_get_wtime();
    cout<<end-st<<endl;

    for (int i = 0; i < array.size(); i++)
    {
        cout << array[i] << " ";
    }

    vector<int> arr = {64, 34, 25, 12, 22, 11, 90};
     st = omp_get_wtime();
     mergeSort(arr, 0, arr.size() - 1);
     end = omp_get_wtime();
    cout << end - st << endl;

    for(int i=0;i<arr.size();i++){
        cout<<arr[i]<<" ";
    }

    return 0;
}
