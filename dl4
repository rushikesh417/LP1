import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
     
df = pd.read_csv("https://raw.githubusercontent.com/SameerBramhecha/LP-5/master/DL/goog1.csv")
     
df.head()

plt.plot(df['Close'])

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df_normalized = scaler.fit_transform(np.array(df['Close']).reshape(-1,1))
     

training_size = int(len(df_normalized)*0.8)
train_data, test_data = df_normalized[:training_size, :], df_normalized[training_size:, :]
     

len(train_data), len(test_data)


def create_dataset(data, step=4):
  x = []
  y = []
  for i in range(len(data) - step):
    x.append(data[i:i+step, 0])
    y.append(data[i+step, 0])

  return np.array(x), np.array(y)

# basically if dataset is [123 124 125 124 123 125 127]
# Independent 4 days  -> next day dependent
# s1  s1  s2  s3  y
# 123 124 125 124 123
# 124 125 124 123 125
# 125 124 123 125 127

x_train, y_train = create_dataset(train_data)
x_test, y_test = create_dataset(test_data)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mse')
model.fit(x_train, y_train, epochs=50)

metrics = model.evaluate(x_test, y_test)
metrics

y_pred=scaler.inverse_transform(model.predict(x_test))
y_test=scaler.inverse_transform(np.array(y_test).reshape(-1,1))

from sklearn.metrics import mean_absolute_error, mean_squared_error
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print('MAE: ', mae)
print('MSE: ', mse)
print('RMSE: ', rmse)

plt.plot(y_test, label='Actual Price')

# Plotting the predicted prices
plt.plot(y_pred, label='Predicted Price')

plt.title('Actual vs Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()
