import numpy as np
import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/SameerBramhecha/LP-5/master/DL/1_boston_housing.csv")
df.head()

df.ffill(inplace=True)
df.isna().sum()

from sklearn.model_selection import train_test_split
X = df.drop('MEDV' ,axis=1)
Y = df['MEDV']
x_train ,x_test ,y_train ,y_test = train_test_split ( X , Y ,train_size=0.2, random_state=1)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(1 ,activation='linear'))
model.compile(optimizer = 'adam' ,loss= 'mse' ,metrics = ['mae', 'mse'])

history = model.fit(x_train ,y_train , epochs=50)
model.summary()

metrics= model.evaluate(x_test, y_test)

mertrics

predictions = model.predict(x_test[:5])
print("\nPredicted Prices:", predictions.flatten())
print("Actual Prices:", y_test[:5])

----------------------------------------------------------------------------------------------------------------------------------

import numpy as np
import pandas as pd
from tensorflow.keras.datasets import imdb
(train_data, train_label), (test_data, test_label) = imdb.load_data(num_words = 10000)
def vectorize_sequences(sequences, dimensions = 10000):
  results = np.zeros((len(sequences), dimensions))
  for i,sequences in enumerate(sequences):
    results[i, sequences] = 1
  return results

x_train = vectorize_sequences(train_data)
x_test = vectorize_sequences(test_data)

y_train = np.asarray(train_label).astype('float32')
y_test = np.asarray(test_label).astype('float32')

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(16, input_shape=(10000, ), activation = "relu"))
model.add(Dense(16, activation = "relu"))
model.add(Dense(1, activation = "sigmoid"))

model.compile(optimizer='adam', loss = 'mse', metrics = ['accuracy'])

history = model.fit(x_train ,y_train ,epochs=50)

metrics =  model.evaluate(x_test , y_test)

predictions = model.predict(x_test[:5])
print("Predicted Sentiments:", ['Positive' if p > 0.5 else 'Negative' for p in predictions])
print("Actual Sentiments:", ['Positive' if l == 1 else 'Negative' for l in y_test[:5]])

-------------------------------------------------------------------------------------------------------------------------------------------------
