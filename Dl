import numpy as np
import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/SameerBramhecha/LP-5/master/DL/1_boston_housing.csv")
df.head()

df.ffill(inplace=True)
df.isna().sum()

from sklearn.model_selection import train_test_split
X = df.drop('MEDV' ,axis=1)
Y = df['MEDV']
x_train ,x_test ,y_train ,y_test = train_test_split ( X , Y ,train_size=0.2, random_state=1)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()
model.add(Dense(1 ,activation='linear'))
model.compile(optimizer = 'adam' ,loss= 'mse' ,metrics = ['mae', 'mse'])

history = model.fit(x_train ,y_train , epochs=50)
model.summary()

metrics= model.evaluate(x_test, y_test)

mertrics

predictions = model.predict(x_test[:5])
print("\nPredicted Prices:", predictions.flatten())
print("Actual Prices:", y_test[:5])

----------------------------------------------------------------------------------------------------------------------------------

import numpy as np
import pandas as pd

df = pd.read_csv("/content/IMDB Dataset.csv")
df.head()
 
df['sentiment'] = df['sentiment'].map({'positive': 1, 'negative': 0})


df = df.sample(frac=1, random_state=42).reset_index(drop=True)


from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

max_words = 10000  # Use top 10,000 words
maxlen = 200       # Max review length

tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(df['review'])

sequences = tokenizer.texts_to_sequences(df['review'])
x_data = pad_sequences(sequences, maxlen=maxlen)
y_data = df['sentiment'].values


# Step 4: Train-test split
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.2, random_state=42)

# Step 5: Build the deep neural network model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, Flatten

model = Sequential()
model.add(Embedding(max_words, 32, input_length=maxlen))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))  # Binary classification

# Step 6: Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

# Step 7: Train the model
history = model.fit(x_train, y_train, epochs=5, batch_size=512, validation_split=0.2)

# Step 9: Make predictions on sample reviews
predictions = model.predict(x_test[:5])
print("Predicted:", ['Positive' if p > 0.5 else 'Negative' for p in predictions])
print("Actual:", ['Positive' if l == 1 else 'Negative' for l in y_test[:5]])

# Step 10: Plot training history
import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()


-------------------------------------------------------------------------------------------------------------------------------------------------


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
     

from tensorflow.keras.datasets import fashion_mnist
(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()
     

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
     

model = Sequential()
model.add(Conv2D(filters=64,kernel_size=(3,3),activation='relu',input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(128, activation = "relu"))
model.add(Dense(10, activation = "softmax"))
model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=5, use_multiprocessing=True)

evaluation = model.evaluate(x_test,y_test)
evaluation

labels = ['t_shirt', 'trouser', 'pullover', 'dress', 'coat', 'sandal', 'shirt', 'sneaker',   'bag', 'ankle_boots']
predictions = model.predict(x_test[11:12])
label = labels[np.argmax(predictions)]
print(label)
plt.imshow(x_test[11:12][0])


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
     
df = pd.read_csv("https://raw.githubusercontent.com/SameerBramhecha/LP-5/master/DL/goog1.csv")
     
df.head()

plt.plot(df['Close'])

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df_normalized = scaler.fit_transform(np.array(df['Close']).reshape(-1,1))
     

training_size = int(len(df_normalized)*0.8)
train_data, test_data = df_normalized[:training_size, :], df_normalized[training_size:, :]
     

len(train_data), len(test_data)


def create_dataset(data, step=4):
  x = []
  y = []
  for i in range(len(data) - step):
    x.append(data[i:i+step, 0])
    y.append(data[i+step, 0])

  return np.array(x), np.array(y)

# basically if dataset is [123 124 125 124 123 125 127]
# Independent 4 days  -> next day dependent
# s1  s1  s2  s3  y
# 123 124 125 124 123
# 124 125 124 123 125
# 125 124 123 125 127

x_train, y_train = create_dataset(train_data)
x_test, y_test = create_dataset(test_data)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mse')
model.fit(x_train, y_train, epochs=50)

metrics = model.evaluate(x_test, y_test)
metrics

y_pred=scaler.inverse_transform(model.predict(x_test))
y_test=scaler.inverse_transform(np.array(y_test).reshape(-1,1))

from sklearn.metrics import mean_absolute_error, mean_squared_error
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print('MAE: ', mae)
print('MSE: ', mse)
print('RMSE: ', rmse)

plt.plot(y_test, label='Actual Price')

# Plotting the predicted prices
plt.plot(y_pred, label='Predicted Price')

plt.title('Actual vs Predicted Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()
     
----------------------------------------------------------------------------------------------------------------------------

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

train_df = pd.read_csv('/content/drive/MyDrive/DL_Datasets/Assignment_3/fashion_mnist/fashion-mnist_test.csv')
test_df = pd.read_csv('/content/drive/MyDrive/DL_Datasets/Assignment_3/fashion_mnist/fashion-mnist_train.csv')

y_train = train_df.iloc[:, 0].values
x_train = train_df.iloc[:, 1:].values
y_test = test_df.iloc[:, 0].values
x_test = test_df.iloc[:, 1:].values

x_train, x_test = x_train / 255.0, x_test / 255.0
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, epochs=5)

loss, acc = model.evaluate(x_test, y_test)
print(loss)
print(acc)

predictions = model.predict(x_test)
plt.figure()
plt.imshow(x_test[1].reshape(28, 28), cmap=plt.cm.binary)
plt.title(f"Prediction: {class_names[np.argmax(predictions[1])]} | True: {class_names[y_test[1]]}")
plt.show()
